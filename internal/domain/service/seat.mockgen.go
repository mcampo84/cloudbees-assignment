// Code generated by MockGen. DO NOT EDIT.
// Source: seat.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSeat is a mock of Seat interface.
type MockSeat struct {
	ctrl     *gomock.Controller
	recorder *MockSeatMockRecorder
}

// MockSeatMockRecorder is the mock recorder for MockSeat.
type MockSeatMockRecorder struct {
	mock *MockSeat
}

// NewMockSeat creates a new mock instance.
func NewMockSeat(ctrl *gomock.Controller) *MockSeat {
	mock := &MockSeat{ctrl: ctrl}
	mock.recorder = &MockSeatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeat) EXPECT() *MockSeatMockRecorder {
	return m.recorder
}

// AssignPassenger mocks base method.
func (m *MockSeat) AssignPassenger(passenger User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPassenger", passenger)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPassenger indicates an expected call of AssignPassenger.
func (mr *MockSeatMockRecorder) AssignPassenger(passenger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPassenger", reflect.TypeOf((*MockSeat)(nil).AssignPassenger), passenger)
}

// GetNumber mocks base method.
func (m *MockSeat) GetNumber() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumber")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNumber indicates an expected call of GetNumber.
func (mr *MockSeatMockRecorder) GetNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumber", reflect.TypeOf((*MockSeat)(nil).GetNumber))
}

// GetPassenger mocks base method.
func (m *MockSeat) GetPassenger() User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassenger")
	ret0, _ := ret[0].(User)
	return ret0
}

// GetPassenger indicates an expected call of GetPassenger.
func (mr *MockSeatMockRecorder) GetPassenger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassenger", reflect.TypeOf((*MockSeat)(nil).GetPassenger))
}

// GetSection mocks base method.
func (m *MockSeat) GetSection() Section {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSection")
	ret0, _ := ret[0].(Section)
	return ret0
}

// GetSection indicates an expected call of GetSection.
func (mr *MockSeatMockRecorder) GetSection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSection", reflect.TypeOf((*MockSeat)(nil).GetSection))
}
