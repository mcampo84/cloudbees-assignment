// Code generated by MockGen. DO NOT EDIT.
// Source: train_repository.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTrainRepository is a mock of TrainRepository interface.
type MockTrainRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrainRepositoryMockRecorder
}

// MockTrainRepositoryMockRecorder is the mock recorder for MockTrainRepository.
type MockTrainRepositoryMockRecorder struct {
	mock *MockTrainRepository
}

// NewMockTrainRepository creates a new mock instance.
func NewMockTrainRepository(ctrl *gomock.Controller) *MockTrainRepository {
	mock := &MockTrainRepository{ctrl: ctrl}
	mock.recorder = &MockTrainRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrainRepository) EXPECT() *MockTrainRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTrainRepository) Create(from, to string) Train {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", from, to)
	ret0, _ := ret[0].(Train)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTrainRepositoryMockRecorder) Create(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTrainRepository)(nil).Create), from, to)
}

// Find mocks base method.
func (m *MockTrainRepository) Find(from, to string) (Train, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", from, to)
	ret0, _ := ret[0].(Train)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTrainRepositoryMockRecorder) Find(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTrainRepository)(nil).Find), from, to)
}
