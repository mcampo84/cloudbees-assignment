// Code generated by MockGen. DO NOT EDIT.
// Source: section.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSection is a mock of Section interface.
type MockSection struct {
	ctrl     *gomock.Controller
	recorder *MockSectionMockRecorder
}

// MockSectionMockRecorder is the mock recorder for MockSection.
type MockSectionMockRecorder struct {
	mock *MockSection
}

// NewMockSection creates a new mock instance.
func NewMockSection(ctrl *gomock.Controller) *MockSection {
	mock := &MockSection{ctrl: ctrl}
	mock.recorder = &MockSectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSection) EXPECT() *MockSectionMockRecorder {
	return m.recorder
}

// GetLabel mocks base method.
func (m *MockSection) GetLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockSectionMockRecorder) GetLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockSection)(nil).GetLabel))
}

// GetSeats mocks base method.
func (m *MockSection) GetSeats() []Seat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeats")
	ret0, _ := ret[0].([]Seat)
	return ret0
}

// GetSeats indicates an expected call of GetSeats.
func (mr *MockSectionMockRecorder) GetSeats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeats", reflect.TypeOf((*MockSection)(nil).GetSeats))
}
