// Code generated by MockGen. DO NOT EDIT.
// Source: ticket.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTicket is a mock of Ticket interface.
type MockTicket struct {
	ctrl     *gomock.Controller
	recorder *MockTicketMockRecorder
}

// MockTicketMockRecorder is the mock recorder for MockTicket.
type MockTicketMockRecorder struct {
	mock *MockTicket
}

// NewMockTicket creates a new mock instance.
func NewMockTicket(ctrl *gomock.Controller) *MockTicket {
	mock := &MockTicket{ctrl: ctrl}
	mock.recorder = &MockTicketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicket) EXPECT() *MockTicketMockRecorder {
	return m.recorder
}

// GetFrom mocks base method.
func (m *MockTicket) GetFrom() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockTicketMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockTicket)(nil).GetFrom))
}

// GetPurchasePrice mocks base method.
func (m *MockTicket) GetPurchasePrice() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasePrice")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetPurchasePrice indicates an expected call of GetPurchasePrice.
func (mr *MockTicketMockRecorder) GetPurchasePrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasePrice", reflect.TypeOf((*MockTicket)(nil).GetPurchasePrice))
}

// GetTo mocks base method.
func (m *MockTicket) GetTo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTo indicates an expected call of GetTo.
func (mr *MockTicketMockRecorder) GetTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTo", reflect.TypeOf((*MockTicket)(nil).GetTo))
}

// GetUser mocks base method.
func (m *MockTicket) GetUser() User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTicketMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTicket)(nil).GetUser))
}
