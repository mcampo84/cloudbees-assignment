// Code generated by MockGen. DO NOT EDIT.
// Source: train.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTrain is a mock of Train interface.
type MockTrain struct {
	ctrl     *gomock.Controller
	recorder *MockTrainMockRecorder
}

// MockTrainMockRecorder is the mock recorder for MockTrain.
type MockTrainMockRecorder struct {
	mock *MockTrain
}

// NewMockTrain creates a new mock instance.
func NewMockTrain(ctrl *gomock.Controller) *MockTrain {
	mock := &MockTrain{ctrl: ctrl}
	mock.recorder = &MockTrainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrain) EXPECT() *MockTrainMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockTrain) GetID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockTrainMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTrain)(nil).GetID))
}

// GetPassengers mocks base method.
func (m *MockTrain) GetPassengers() map[string][]User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassengers")
	ret0, _ := ret[0].(map[string][]User)
	return ret0
}

// GetPassengers indicates an expected call of GetPassengers.
func (mr *MockTrainMockRecorder) GetPassengers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassengers", reflect.TypeOf((*MockTrain)(nil).GetPassengers))
}

// GetSections mocks base method.
func (m *MockTrain) GetSections() []Section {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSections")
	ret0, _ := ret[0].([]Section)
	return ret0
}

// GetSections indicates an expected call of GetSections.
func (mr *MockTrainMockRecorder) GetSections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSections", reflect.TypeOf((*MockTrain)(nil).GetSections))
}
