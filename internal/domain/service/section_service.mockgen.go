// Code generated by MockGen. DO NOT EDIT.
// Source: section_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSectionService is a mock of SectionService interface.
type MockSectionService struct {
	ctrl     *gomock.Controller
	recorder *MockSectionServiceMockRecorder
}

// MockSectionServiceMockRecorder is the mock recorder for MockSectionService.
type MockSectionServiceMockRecorder struct {
	mock *MockSectionService
}

// NewMockSectionService creates a new mock instance.
func NewMockSectionService(ctrl *gomock.Controller) *MockSectionService {
	mock := &MockSectionService{ctrl: ctrl}
	mock.recorder = &MockSectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSectionService) EXPECT() *MockSectionServiceMockRecorder {
	return m.recorder
}

// GetNextOpenSeat mocks base method.
func (m *MockSectionService) GetNextOpenSeat(section Section) (Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextOpenSeat", section)
	ret0, _ := ret[0].(Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextOpenSeat indicates an expected call of GetNextOpenSeat.
func (mr *MockSectionServiceMockRecorder) GetNextOpenSeat(section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextOpenSeat", reflect.TypeOf((*MockSectionService)(nil).GetNextOpenSeat), section)
}

// GetOpenSeats mocks base method.
func (m *MockSectionService) GetOpenSeats(section Section) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenSeats", section)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetOpenSeats indicates an expected call of GetOpenSeats.
func (mr *MockSectionServiceMockRecorder) GetOpenSeats(section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenSeats", reflect.TypeOf((*MockSectionService)(nil).GetOpenSeats), section)
}
